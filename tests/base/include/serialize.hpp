
// Copyright (c) 2010-2018 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__serialize_hpp
#define __yas__tests__base__include__serialize_hpp

template<typename archive_traits>
bool serialize_test(std::ostream &log, const char *archive_type, const char *test_name) {
    bool b = true, b2{};
    std::int8_t c = '1', c2{};
    std::uint8_t uc = '2', uc2{};
    std::int16_t s = 3, s2{};
    std::uint16_t us = 4, us2{};
    std::int32_t i = 5, i2{};
    std::uint32_t l = 6, l2{};
    std::int64_t i64 = 7, i642{};
    std::uint64_t u64 = 8, u642{};

    std::int64_t i64max = std::numeric_limits<std::int64_t>::max(), i64max2{};
    std::uint64_t u64max = std::numeric_limits<std::uint64_t>::max(), u64max2{};

    float f = 3.14f, f2{};
    double d = 3.14, d2{};

    const auto o0 = YAS_OBJECT_NVP(
         "obj"
        ,("b", b)
        ,("c", c)
        ,("uc", uc)
        ,("s", s)
        ,("us", us)
        ,("i", i)
        ,("l", l)
        ,("i64", i64)
        ,("u64", u64)
        ,("f", f)
        ,("d", d)
        ,("i64max", i64max)
        ,("u64max", u64max)
    );

    {
        const auto buf = yas::save<yas::mem|yas::binary>(o0);
        yas::load<yas::mem|yas::binary>(
             buf
            ,YAS_OBJECT_NVP(
                 "obj"
                ,("b", b2)
                ,("c", c2)
                ,("uc", uc2)
                ,("s", s2)
                ,("us", us2)
                ,("i", i2)
                ,("l", l2)
                ,("i64", i642)
                ,("u64", u642)
                ,("f", f2)
                ,("d", d2)
                ,("i64max", i64max2)
                ,("u64max", u64max2)
            )
        );
        if ( b!=b2||c!=c2||uc!=uc2||s!=s2||us!=us2||i!=i2||l!=l2||i64!=i642||u64!=u642||f!=f2||d!=d2||i64max!=i64max2||u64max!=u64max2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }
    b2=0;c2=0;uc2=0;s2=0;us2=0;i2=0;l2=0;i642=0;u642=0;i64max2=0;u64max2=0;f2=0;d2=0;
    {
        const auto buf = yas::save<yas::mem|yas::text>(o0);
        yas::load<yas::mem|yas::text>(
             buf
            ,YAS_OBJECT_NVP(
                "obj"
                ,("b", b2)
                ,("c", c2)
                ,("uc", uc2)
                ,("s", s2)
                ,("us", us2)
                ,("i", i2)
                ,("l", l2)
                ,("i64", i642)
                ,("u64", u642)
                ,("f", f2)
                ,("d", d2)
                ,("i64max", i64max2)
                ,("u64max", u64max2)
            )
        );
        if ( b!=b2||c!=c2||uc!=uc2||s!=s2||us!=us2||i!=i2||l!=l2||i64!=i642||u64!=u642||f!=f2||d!=d2||i64max!=i64max2||u64max!=u64max2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }
    b2=0;c2=0;uc2=0;s2=0;us2=0;i2=0;l2=0;i642=0;u642=0;i64max2=0;u64max2=0;f2=0;d2=0;
    {
        const char *fname = "file.bin";
        std::remove(fname);

        yas::save<yas::file|yas::binary>(fname, o0);
        yas::load<yas::file|yas::binary>(
             fname
            ,YAS_OBJECT_NVP(
                "obj"
                ,("b", b2)
                ,("c", c2)
                ,("uc", uc2)
                ,("s", s2)
                ,("us", us2)
                ,("i", i2)
                ,("l", l2)
                ,("i64", i642)
                ,("u64", u642)
                ,("f", f2)
                ,("d", d2)
                ,("i64max", i64max2)
                ,("u64max", u64max2)
            )
        );
        if ( b!=b2||c!=c2||uc!=uc2||s!=s2||us!=us2||i!=i2||l!=l2||i64!=i642||u64!=u642||f!=f2||d!=d2||i64max!=i64max2||u64max!=u64max2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }
    b2=0;c2=0;uc2=0;s2=0;us2=0;i2=0;l2=0;i642=0;u642=0;i64max2=0;u64max2=0;f2=0;d2=0;
    {
        const char *fname = "file.txt";
        std::remove(fname);

        yas::save<yas::file|yas::text>(fname, o0);
        yas::load<yas::file|yas::text>(
             fname
            ,YAS_OBJECT_NVP(
                "obj"
                ,("b", b2)
                ,("c", c2)
                ,("uc", uc2)
                ,("s", s2)
                ,("us", us2)
                ,("i", i2)
                ,("l", l2)
                ,("i64", i642)
                ,("u64", u642)
                ,("f", f2)
                ,("d", d2)
                ,("i64max", i64max2)
                ,("u64max", u64max2)
            )
        );
        if ( b!=b2||c!=c2||uc!=uc2||s!=s2||us!=us2||i!=i2||l!=l2||i64!=i642||u64!=u642||f!=f2||d!=d2||i64max!=i64max2||u64max!=u64max2 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }

    return true;
}

#endif // __yas__tests__base__include__serialize_hpp
