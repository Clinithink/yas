
// Copyright (c) 2010-2018 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__tests__base__include__yas_object_hpp
#define __yas__tests__base__include__yas_object_hpp

/***************************************************************************/

namespace _yas_object_test {

struct type {
	int v;

	type(int v)
		:v(v)
	{}

	template<typename Archive>
	void serialize(Archive &ar) {
		auto o = YAS_OBJECT("type0", v);
		ar & o;
	}
};

} // ns _yas_object_test

template<typename archive_traits>
bool yas_object_test(std::ostream &log, const char *archive_type, const char *test_name) {
	{
		int i0 = 3, i1 = 0;

		typename archive_traits::oarchive oa;
		archive_traits::ocreate(oa, archive_type);

        auto o0 = YAS_OBJECT("object0", i0);
		oa & o0;

		typename archive_traits::iarchive ia;
		archive_traits::icreate(ia, oa, archive_type);

        auto o1 = YAS_OBJECT_NVP("object1", ("i0", i1));
		ia & o1;

		if ( i0 != i1 ) {
			YAS_TEST_REPORT(log, archive_type, test_name);
			return false;
		}
	}
	{
		const int i0 = 4;
		int i1 = 0;

		typename archive_traits::oarchive oa;
		archive_traits::ocreate(oa, archive_type);

        auto o0 = YAS_OBJECT("object0", i0);
		oa & o0;

		typename archive_traits::iarchive ia;
		archive_traits::icreate(ia, oa, archive_type);

        auto o1 = YAS_OBJECT_NVP("object1", ("i0", i1));
		ia & o1;

		if ( i0 != i1 ) {
			YAS_TEST_REPORT(log, archive_type, test_name);
			return false;
		}
	}
	{
		int i0 = 3, i1 = 0;

		typename archive_traits::oarchive oa;
		archive_traits::ocreate(oa, archive_type);
		oa & YAS_OBJECT("object0", i0);

		typename archive_traits::iarchive ia;
		archive_traits::icreate(ia, oa, archive_type);
		ia & YAS_OBJECT_NVP("object1", ("i0", i1));

		if ( i0 != i1 ) {
			YAS_TEST_REPORT(log, archive_type, test_name);
			return false;
		}
	}
	{
        _yas_object_test::type t0(3), t1(0);

		typename archive_traits::oarchive oa;
		archive_traits::ocreate(oa, archive_type);
		oa & t0;

		typename archive_traits::iarchive ia;
		archive_traits::icreate(ia, oa, archive_type);
		ia & t1;

		if ( t0.v != t1.v ) {
			YAS_TEST_REPORT(log, archive_type, test_name);
			return false;
		}
	}
	{
		typename archive_traits::oarchive oa;
		archive_traits::ocreate(oa, archive_type);
        auto o0 = YAS_OBJECT(nullptr);
		oa & o0;

        typename archive_traits::iarchive ia;
        archive_traits::icreate(ia, oa, archive_type);
        auto o1 = YAS_OBJECT(nullptr);
        ia & o1;
	}
    {
        typename archive_traits::oarchive oa;
        archive_traits::ocreate(oa, archive_type);
        auto o0 = YAS_OBJECT_NVP(nullptr, ("a", 0), ("b", 1));
        oa & o0;

        int a=0, b=0;

        bool ok = false;
        try {
            typename archive_traits::iarchive ia;
            archive_traits::icreate(ia, oa, archive_type);
            auto o1 = YAS_OBJECT(nullptr, a, b);
            ia & o1;
        } catch (const yas::serialization_exception &) {
            ok = true;
        }
        if ( ok ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
        if ( a != 0 || b != 1 ) {
            YAS_TEST_REPORT(log, archive_type, test_name);
            return false;
        }
    }
    {
        if ( archive_traits::iarchive_type::flags() & yas::json ) {
            if ( !(archive_traits::iarchive_type::flags() & yas::compacted) ) {
                typename archive_traits::oarchive oa;
                archive_traits::ocreate(oa, archive_type);
                auto o0 = YAS_OBJECT_NVP(nullptr, ("b", 1), ("c", 2), ("a", 0));
                oa & o0;

                int a=0, b=0;

                bool ok = false;
                try {
                    typename archive_traits::iarchive ia;
                    archive_traits::icreate(ia, oa, archive_type);
                    auto o1 = YAS_OBJECT(nullptr, b, a);
                    ia & o1;
                } catch (const yas::serialization_exception &) {
                    ok = true;
                }
                if ( ok == true ) {
                    YAS_TEST_REPORT(log, archive_type, test_name);
                    return false;
                }
                if ( a != 0 || b != 1 ) {
                    YAS_TEST_REPORT(log, archive_type, test_name);
                    return false;
                }
            }
        }
    }
    {
        if ( archive_traits::iarchive_type::flags() & yas::json ) {
            if ( !(archive_traits::iarchive_type::flags() & yas::compacted) ) {
                typename archive_traits::oarchive oa;
                archive_traits::ocreate(oa, archive_type);
                auto o0 = YAS_OBJECT_NVP(nullptr, ("b", 1), ("c", 2), ("a", 0));
                oa & o0;

                int c=0;

                bool ok = false;
                try {
                    typename archive_traits::iarchive ia;
                    archive_traits::icreate(ia, oa, archive_type);
                    auto o1 = YAS_OBJECT(nullptr, c);
                    ia & o1;
                } catch (const yas::serialization_exception &) {
                    ok = true;
                }
                if ( ok == true ) {
                    YAS_TEST_REPORT(log, archive_type, test_name);
                    return false;
                }
                if ( c != 2 ) {
                    YAS_TEST_REPORT(log, archive_type, test_name);
                    return false;
                }
            }
        }
    }

	return true;
}

/***************************************************************************/

#endif // __yas__tests__base__include__yas_object_hpp
